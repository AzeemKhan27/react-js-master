step-1 -|  TodoContext.js  |-

import { createContext, useContext } from "react"

export const TodoContext = createContext({
    toods : [
        {
            id : 1,
            todo : "Todo msg",
            completed : false
        }
    ],

    addTodo : (todo) => {},             // we will write functionality in App.jsx file.
    updatedTodo : (id,todo) => {},
    deleteTodo : (id) => {},
    toggleComplete : (id) => {}
    //Note : here we have make functionality like this but we don't need to make logics.

})

export const TodoProvider = TodoContext.Provider

export const useTodo = () => {
    return useContext(TodoContext)
}

---------
 step-2
---------
1- make new file named index.js, and we will import all context file there and then export.

code :-  export { TodoContext,TodoProvider, useTodo } from "./TodoContext"

---------
 step-3
---------
1- goto App.jsx
2- import{ TodoProvider } from './contexts'
3- 

   const [todos, setTodos] = useState([])

   const addTodo = (todo) => {
     setTodos((prev)=>[{id:Date.now(),...todo}, ...prev])
   }

   const updatedTodo = (id,todo) => {
    setTodos((prev) => prev.map((prevTodo) => (prevTodo.id === id ? todo : prevTodo)))
  }

  const deleteTodo = (id) => {
    setTodos((prev) => prev.filter((todo) => todo.id !== id))
  }

  const toggleComplete = (id) => {
    setTodos((prev) => prev.map((prevTodo) => prevTodo === id ?
    {...prevTodo, completed: !prevTodo.completed} : prevTodo))
  }


4- <TodoProvider value = {{todos,addTodo,updatedTodo,deleteTodo,toggleComplete}}> Html code </TodoProvider

5- 
  useEffect(() => {
    const todos = JSON.parse(localStorage.getItem("todos"));
    
    if(todos.length > 0 && todos){
      setTodos(todos)
    }
  }, [])

  useEffect(() => {
    localStorage.setItem("todos", JSON.stringify(todos))
  }, [todos])


--------
 step-4
--------
1- components folder and two JSX files

TodoForm.jsx :-

   const [todo,setTodo] = useState("")
   const {addTodo} = useTodo()

   const add = (e) => {
        e.preventDefault()
        
        if(!todo) return

        //addTodo({id: Date.now(), todo: todo, completed : false}) // passing values to App.JSX
        addTodo({todo, completed : false}) // passing values to App.jsx, we don't need to send "id" because already giving in App.jsx
        setTodo("") //clean setTodo
    }

    return (
        <form onClick={add} className="flex">
            <input
                type="text"
                placeholder="Write Todo..."
                className="w-full border border-black/10 rounded-l-lg px-3 outline-none duration-150 bg-white/20 py-1.5"
                value = {todo}
                onChange = {(e) => setTodo(e.target.value)}
            />
            <button type="submit" className="rounded-r-lg px-3 py-1 bg-green-600 text-white shrink-0">
                Add
            </button>
        </form>
    );


-----------
  step - 5
-----------    

TodoItem.jsx

const [isTodoEditable, setIsTodoEditable] = useState(false)
     const [todoMsg, setTodoMsg] = useState(todo.todo)
     const { updateTodo, deleteTodo, toggleComplete } = useTodo()

     const editTodo = () => {
        updateTodo(todo.id, {...todo, todo: todoMsg})
        setIsTodoEditable(false)
     }

     const toggleCompleted = () => {   //local method name "toggleCompleted"
        toggleComplete(todo.id)        //toggleComplete is belonging Context
     }

return (
        <div
            className={`flex border border-black/10 rounded-lg px-3 py-1.5 gap-x-3 shadow-sm shadow-white/50 duration-300  text-black ${
                todo.completed ? "bg-[#c6e9a7]" : "bg-[#ccbed7]"
            }`}
        >
            <input
                type="checkbox"
                className="cursor-pointer"
                checked={todo.completed}
                onChange={toggleCompleted}
            />
            <input
                type="text"
                className={`border outline-none w-full bg-transparent rounded-lg ${
                    isTodoEditable ? "border-black/10 px-2" : "border-transparent"
                } ${todo.completed ? "line-through" : ""}`}
                value={todoMsg}
                onChange={(e) => setTodoMsg(e.target.value)}
                readOnly={!isTodoEditable}
            />
            {/* Edit, Save Button */}
            <button
                className="inline-flex w-8 h-8 rounded-lg text-sm border border-black/10 justify-center items-center bg-gray-50 hover:bg-gray-100 shrink-0 disabled:opacity-50"
                onClick={() => {
                    if (todo.completed) return;

                    if (isTodoEditable) {
                        editTodo();
                    } else setIsTodoEditable((prev) => !prev);
                }}
                disabled={todo.completed}
            >
                {isTodoEditable ? "üìÅ" : "‚úèÔ∏è"}
            </button>
            {/* Delete Todo Button */}
            <button
                className="inline-flex w-8 h-8 rounded-lg text-sm border border-black/10 justify-center items-center bg-gray-50 hover:bg-gray-100 shrink-0"
                onClick={() => deleteTodo(todo.id)}
            >
                ‚ùå
            </button>
        </div>
    );



